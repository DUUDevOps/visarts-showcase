{"version":3,"sources":["firebaseConfig.js","Components/SubmissionForm.js","Components/VotingMain.js","Components/VotingSignIn.js","Components/AdminMain.js","Components/AdminSignIn.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initialState","firstName","lastName","netId","grade","title","medium","year","description","image","url","SubmissionForm","props","state","handleChange","bind","handleSubmit","handleFiles","this","setState","event","target","value","name","files","img","preventDefault","file","storageRef","storage","ref","put","then","getDownloadURL","urlResult","pushToDatabase","console","log","alert","submissionsRef","database","submission","push","className","Form","onSubmit","FormGroup","Label","Input","type","placeholder","onChange","CustomInput","Button","color","React","Component","submissions","unvotedSubmissions","currentSubmission","currentVote","VotingMain","currentUser","user","handleChangeVote","handleNext","handlePrevious","voterRef","uid","on","snapshot","val","newState","unvotedState","objToAdd","id","snap","votersRef","vote","newUnvotedArr","indexToRemove","indexOf","splice","length","update","index","displayName","Container","href","src","width","height","dimensions","onClick","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","VotingSignIn","signOut","signInWithGoogle","withFirebaseAuth","makeStyles","table","minWidth","createData","calories","fat","carbs","protein","AdminMain","data","dataBuild","votes","allVoters","voter","snp","voteValue","submissionsArr","Object","keys","forEach","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","scope","AdminSignIn","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d535d492.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAxi0R0RARe2uX8afqlzXrBC7_ilIjgd7Y\",\r\n    authDomain: \"visarts-showcase.firebaseapp.com\",\r\n    databaseURL: \"https://visarts-showcase.firebaseio.com\",\r\n    projectId: \"visarts-showcase\",\r\n    storageBucket: \"visarts-showcase.appspot.com\",\r\n    messagingSenderId: \"939119617819\",\r\n    appId: \"1:939119617819:web:1b50e3b920b6ee3e6a15be\",\r\n    measurementId: \"G-2LCJJDS2VZ\"\r\n    };\r\n\r\n//   // Initialize Firebase\r\n//   firebase.initializeApp(firebaseConfig);\r\n//   firebase.analytics();\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nexport default firebaseApp;","import React from 'react';\r\nimport { Col, Button, Form, FormGroup, Label, Input, Container, CustomInput } from 'reactstrap';\r\nimport firebaseApp from '../firebaseConfig';\r\nimport '../App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\n\r\n\r\nconst initialState = {\r\n    firstName: '',\r\n    lastName: '',\r\n    netId: '',\r\n    grade: '',\r\n    title: '',\r\n    medium: '',\r\n    year: '',\r\n    description: '',\r\n    image: null,\r\n    url: ''\r\n};\r\n\r\n\r\nclass SubmissionForm extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = initialState;\r\n\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleFiles = this.handleFiles.bind(this);\r\n  }\r\n\r\nresetState(){\r\n    this.setState(initialState);\r\n}\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    \r\n    this.setState({\r\n        [name]: value\r\n    });\r\n  }\r\n\r\n  handleFiles(event){\r\n      if (event.target.files[0]){\r\n          const img = event.target.files[0];\r\n          this.setState({\r\n            image: img\r\n          });\r\n      }\r\n  }\r\n\r\n  validateInput(){\r\n\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n\r\n    /** Submit File to Firebase Storage and submission to database*/\r\n    var file = this.state.image;\r\n    var storageRef = firebaseApp.storage().ref(`Spring2020/${file.name}`);\r\n\r\n    storageRef.put(file).then(() => {\r\n        storageRef.getDownloadURL().then(urlResult => {\r\n            this.setState({url: urlResult});\r\n            this.pushToDatabase();\r\n            console.log('Uploaded file successfully: ', file.name, this.state);\r\n        });\r\n    })    \r\n\r\n    /**ADD THIS TO SOMEWHERE NOT HERE LMAO */\r\n    //this.resetState();\r\n\r\n    alert('A name was submitted: ' + this.state.firstName + ' ' + this.state.lastName);\r\n\r\n  }\r\n\r\n  pushToDatabase(){\r\n    /** Submit text data to Firebase real-time database*/\r\n    var submissionsRef = firebaseApp.database().ref('submissions');\r\n    var submission = {\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n        netId: this.state.netId,\r\n        grade: this.state.grade,\r\n        title: this.state.title,\r\n        medium: this.state.medium,\r\n        year: this.state.year,\r\n        description: this.state.description,\r\n        url: this.state.url\r\n    };\r\n    submissionsRef.push(submission);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"submissionForm\">\r\n            <Form onSubmit={this.handleSubmit} className=\"form\">\r\n\r\n                <FormGroup >\r\n                    <Label>First Name</Label>\r\n                    <Input name=\"firstName\" type=\"text\" placeholder=\"First Name\" value={this.state.firstName} onChange={this.handleChange} />\r\n                </FormGroup>\r\n\r\n                <FormGroup >\r\n                    <Label>Last Name</Label>\r\n                    <Input name=\"lastName\" type=\"text\" placeholder=\"Last Name\" value={this.state.lastName} onChange={this.handleChange} />\r\n                </FormGroup>\r\n    \r\n                <FormGroup >\r\n                    <Label>NetID</Label>\r\n                    <Input name=\"netId\" type=\"text\" placeholder=\"NetID\" value={this.state.netId} onChange={this.handleChange} />\r\n                </FormGroup>\r\n\r\n                <FormGroup >\r\n                    <Label>Current grade</Label>\r\n                    <Input name=\"grade\" type=\"select\" value={this.state.grade} onChange={this.handleChange} placeholder=''>\r\n                        <option></option>\r\n                        <option>First-year</option>\r\n                        <option>Sophomore</option>\r\n                        <option>Junior</option>\r\n                        <option>Senior</option>\r\n                        <option>Graduate/professional</option>\r\n                    </Input>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>Upload artwork</Label>\r\n                    <CustomInput type=\"file\" name=\"file\" onChange={this.handleFiles} />\r\n                </FormGroup>\r\n\r\n\r\n                <FormGroup >\r\n                    <Label>Title of work</Label>\r\n                    <Input name=\"title\" type=\"text\" placeholder=\"Title\" value={this.state.title} onChange={this.handleChange} />\r\n                </FormGroup>\r\n\r\n                <FormGroup >\r\n                    <Label>Medium</Label>\r\n                    <Input name=\"medium\" type=\"text\" placeholder=\"e.g. digital, screenprint, watercolor, etc.\" value={this.state.medium} onChange={this.handleChange} />\r\n                </FormGroup>\r\n        \r\n                <FormGroup >\r\n                    <Label>Year of creation</Label>\r\n                    <Input name=\"year\" type=\"year\" placeholder=\"Year\" value={this.state.year} onChange={this.handleChange} />\r\n                </FormGroup>\r\n\r\n                <FormGroup >\r\n                    <Label>Description</Label>\r\n                    <Input name=\"description\" type=\"textarea\" placeholder=\"Description\" value={this.state.description} onChange={this.handleChange} />\r\n                </FormGroup>\r\n\r\n\r\n                <Button color=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmissionForm;\r\n","import React from 'react';\r\nimport firebase from 'firebase/app';\r\nimport firebaseApp from '../firebaseConfig';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nimport { Button, Form, FormGroup, Label, Input, Container } from 'reactstrap';\r\nimport Rating from 'react-rating';\r\n\r\n\r\nconst initialState = {\r\n    submissions: [],\r\n    unvotedSubmissions: [],\r\n    currentSubmission: {},\r\n    currentVote: null,\r\n};\r\n\r\nclass VotingMain extends React.Component{\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = initialState;\r\n\r\n        this.currentUser = this.props.user;\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChangeVote = this.handleChangeVote.bind(this);\r\n        this.handleNext = this.handleNext.bind(this);\r\n        this.handlePrevious = this.handlePrevious.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(\"Component mounted\");\r\n        const submissionsRef = firebaseApp.database().ref('submissions');\r\n        const voterRef = firebaseApp.database().ref(`voters/${this.currentUser.uid}/votes`)\r\n        voterRef.on('value', (snapshot) => console.log(\"VOTE\", snapshot.val()));\r\n        \r\n        submissionsRef.on('value', (snapshot) => {\r\n            let submissions = snapshot.val();\r\n            let newState = [];\r\n            let unvotedState = [];\r\n            for (let submission in submissions){\r\n\r\n                var objToAdd = {...submissions[submission], ...{id: submission}};\r\n                newState.push(objToAdd);\r\n\r\n                voterRef.on('value', (snap) => {\r\n                    if ((snap.val() == null) || !(submission in snap.val())){\r\n                        unvotedState.push(objToAdd);\r\n                    }\r\n                })\r\n                \r\n            }\r\n\r\n            this.setState({\r\n                submissions: newState,\r\n                unvotedSubmissions: unvotedState,\r\n                currentSubmission: unvotedState[0]\r\n            });\r\n\r\n\r\n        });\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n\r\n\r\n        var votersRef = firebaseApp.database().ref(`voters/${this.currentUser.uid}/votes`);\r\n        var vote = {\r\n            [this.state.currentSubmission.id]: this.state.currentVote \r\n        };\r\n\r\n        var newUnvotedArr = [...this.state.unvotedSubmissions];\r\n        var indexToRemove = newUnvotedArr.indexOf(this.state.currentSubmission);\r\n\r\n        if (indexToRemove > -1){\r\n            newUnvotedArr.splice(indexToRemove, 1)\r\n            this.setState({\r\n                    unvotedSubmissions: newUnvotedArr\r\n                }, () => {\r\n\r\n                if (this.state.unvotedSubmissions.length == 0){\r\n                    this.setState({currentSubmission: null});\r\n                }\r\n                else{\r\n                    if (!this.handleNext()){\r\n                        this.handlePrevious();\r\n                    }\r\n                }\r\n            });\r\n            \r\n            \r\n        }\r\n\r\n        votersRef.update(vote).then(() => console.log('Pushed vote successful', this.state.currentVote));\r\n        \r\n    }\r\n\r\n    handleNext(event){\r\n        var index = this.state.unvotedSubmissions.indexOf(this.state.currentSubmission);\r\n        if(index + 1 >= 0 && index + 1 < this.state.unvotedSubmissions.length){\r\n            this.setState({\r\n                currentSubmission: this.state.unvotedSubmissions[index + 1]\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    handlePrevious(event){\r\n        var index = this.state.unvotedSubmissions.indexOf(this.state.currentSubmission);\r\n        if(index - 1 >= 0 && index - 1 < this.state.unvotedSubmissions.length){\r\n            this.setState({\r\n                currentSubmission: this.state.unvotedSubmissions[index - 1]\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    handleChangeVote(value){\r\n        this.setState({\r\n            currentVote: value\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h3>Hello, {this.currentUser.displayName}! Please submit a vote on the following {this.state.unvotedSubmissions.length} submissions.</h3>\r\n                {/* <ul>\r\n                    {this.state.submissions.map((submission) => {\r\n                        return(\r\n                            <li key={submission.id}>\r\n                                <h3>{submission.id}</h3>\r\n                                <p>Title: {submission.title}</p>\r\n                                <p>by {submission.firstName}</p>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul> */}\r\n                {\r\n                    this.state.currentSubmission\r\n                    ?\r\n                    <Container className=\"themed-container\">\r\n                        <a href={this.state.currentSubmission.url} target=\"_blank\">\r\n                            <img  src={this.state.currentSubmission.url} width=\"auto\" height=\"250\"/>\r\n                        </a>\r\n                        <p><i>(Click to enlarge)</i></p>\r\n                        <p>Title: {this.state.currentSubmission.title}</p>\r\n                        <p>Description: {this.state.currentSubmission.description}</p>\r\n                        <p>Medium: {this.state.currentSubmission.medium}</p>\r\n                        <p>Dimensions: {this.state.currentSubmission.dimensions}</p>\r\n                        <p>Vote: <Rating value={this.state.currentVote} onChange={this.handleChangeVote}/></p>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Button type=\"submit\">Submit Vote</Button>\r\n                        </Form>\r\n                        <Button onClick={this.handlePrevious}>Previous</Button>\r\n                        <Button onClick={this.handleNext}>Next</Button>\r\n                        <button onClick={() => {console.log(this.state)}}>Get the fuckin state</button>\r\n                    </Container>\r\n                    : <h3>No more submissions to rate!</h3>\r\n                }\r\n\r\n            \r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default VotingMain;","import React from 'react';\r\nimport VotingMain from './VotingMain';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport withFirebaseAuth from 'react-with-firebase-auth';\r\nimport firebaseApp from '../firebaseConfig';\r\n\r\n\r\nconst firebaseAppAuth = firebaseApp.auth();\r\n\r\nconst providers = {\r\n    googleProvider: new firebase.auth.GoogleAuthProvider()\r\n};\r\n\r\n\r\nclass VotingSignIn extends React.Component {\r\n    render(){\r\n        const {user, signOut, signInWithGoogle} = this.props;\r\n        return(\r\n                <div>\r\n\r\n                <h1>VOTING PAGE</h1>\r\n                {\r\n                    user \r\n                    ? <VotingMain user={user}/>\r\n                    : <p>Please sign in.</p>    \r\n                }\r\n                {\r\n                    user\r\n                    ? <button onClick={signOut}>Sign out</button>\r\n                    : <button onClick={signInWithGoogle}>Sign in with Google</button>\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withFirebaseAuth({\r\n    providers,\r\n    firebaseAppAuth\r\n})(VotingSignIn);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport firebaseApp from '../firebaseConfig';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n  });\r\n  \r\n  function createData(name, calories, fat, carbs, protein) {\r\n    return { name, calories, fat, carbs, protein };\r\n  }\r\n  \r\n  const rows = [\r\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData('Eclair', 262, 16.0, 24, 6.0),\r\n    createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n  ];\r\n\r\nclass AdminMain extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n            submissions: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const submissionsRef = firebaseApp.database().ref('submissions');\r\n        const votersRef = firebaseApp.database().ref('voters');\r\n\r\n        var dataBuild = {};\r\n\r\n        submissionsRef.on('value', (snapshot) => {\r\n            let submissions = snapshot.val();\r\n            var dataBuild = {};\r\n\r\n            for (let submission in submissions){\r\n                dataBuild[submission] = {\r\n                    votes: [],\r\n                    title: submissions[submission].title,\r\n                    description: submissions[submission].description,\r\n                    url: submissions[submission].url,\r\n                    firstName: submissions[submission].firstName,\r\n                    lastName: submissions[submission].lastName,\r\n                    id: submission\r\n                };\r\n\r\n                votersRef.on('value', (snap) => {\r\n                    let allVoters = snap.val();\r\n\r\n                    for (let voter in allVoters){\r\n                        var voterRef = firebaseApp.database().ref(`voters/${voter}/votes`);\r\n\r\n                        voterRef.on('value', (snp) => {\r\n                            let votes = snp.val();\r\n                            if (submission in votes){ //If this submission has been voted by voter\r\n                                const voteValue = votes[submission];\r\n                                dataBuild[submission].votes.push(voteValue);\r\n                            }\r\n                            \r\n                        });\r\n                    }\r\n                });\r\n                this.setState({\r\n                    data: dataBuild\r\n                });\r\n            }\r\n\r\n            var submissionsArr = [];\r\n            Object.keys(this.state.data).forEach(submission => {\r\n                submissionsArr.push(this.state.data[submission])\r\n            });   \r\n            this.setState({\r\n                submissions: submissionsArr\r\n            });\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        \r\n        \r\n        return (\r\n            <TableContainer component={Paper}>\r\n              <Table  aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell><b>Title</b></TableCell>\r\n                    <TableCell align=\"right\"><b>URL</b></TableCell>\r\n                    <TableCell align=\"right\"><b>Description</b></TableCell>\r\n                    <TableCell align=\"right\"><b>First Name</b></TableCell>\r\n                    <TableCell align=\"right\"><b>Last Name</b></TableCell>\r\n                    <TableCell align=\"right\"><b>Total Votes</b></TableCell>\r\n                    <TableCell align=\"right\"><b>Average Rating</b></TableCell>\r\n                    <TableCell align=\"right\"><b>Median Rating</b></TableCell>\r\n\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n\r\n\r\n                  {this.state.submissions.map(submission => (\r\n                    <TableRow key={submission.id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {submission.title}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                          <a href={submission.url} target=\"_blank\">\r\n                            <img  src={submission.url} width=\"auto\" height=\"50\"/>\r\n                           </a>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{submission.description}</TableCell>\r\n                      <TableCell align=\"right\">{submission.firstName}</TableCell>\r\n                      <TableCell align=\"right\">{submission.lastName}</TableCell>\r\n\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n              <button onClick={() => {console.log(this.state)}}>Get the fuckin state</button>\r\n\r\n            </TableContainer>\r\n          );\r\n    }\r\n\r\n}\r\nexport default AdminMain;","import React from 'react';\r\nimport AdminMain from './AdminMain';\r\n\r\nclass AdminSignIn extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n               <h1>Admin Sign In</h1>\r\n                <AdminMain /> \r\n            </div>\r\n            \r\n        );\r\n    }\r\n\r\n}\r\nexport default AdminSignIn;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter, Route, Link } from 'react-router-dom';\nimport SubmissionForm from './Components/SubmissionForm';\nimport VotingSignIn from './Components/VotingSignIn';\nimport AdminSignIn from './Components/AdminSignIn';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App-style\">\n      <h2 align=\"center\"><b>VisArts Spring Showcase Submission</b></h2>\n\n      <HashRouter basename='/'>\n          <Route exact path=\"/\" component={SubmissionForm} />\n          <Route path=\"/voting\" component={VotingSignIn} />\n          <Route path=\"/admin\" component={AdminSignIn} />\n\n      </HashRouter>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport VotingSignIn from './Components/VotingSignIn';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\n// const routing = (\n//     <Router>\n//       <div>\n//         <Route path=\"/\" component={App} />\n//         <Route path=\"/voting\" component={VotingSignIn} />\n//       </div>\n//     </Router>\n//   )\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}